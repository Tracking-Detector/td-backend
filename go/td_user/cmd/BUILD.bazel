load("@rules_go//go:def.bzl", "go_binary", "go_library")
# load("@rules_oci//oci:defs.bzl", "oci_image", "oci_tarball")
# load("@container_structure_test//:defs.bzl", "container_structure_test")
# load("@aspect_bazel_lib//lib:transitions.bzl", "platform_transition_filegroup")
# load("@rules_pkg//:pkg.bzl", "pkg_tar")
go_library(
    name = "cmd_lib",
    srcs = ["main.go"],
    importpath = "github.com/Tracking-Detector/td-backend/go/td_user/cmd",
    visibility = ["//visibility:private"],
    deps = [
        "//go/td_common/config",
        "//go/td_common/repository",
        "//go/td_common/service",
        "//go/td_common/util",
        "//go/td_user/controller",
    ],
)

go_binary(
    name = "cmd",
    embed = [":cmd_lib"],
    visibility = ["//visibility:public"],
)



# pkg_tar(
#     name = "app_layer",
#     srcs = [":cmd"],
#     # If the binary depends on RUNFILES, uncomment the attribute below.
#     # include_runfiles = True
# )

# oci_image(
#     name = "image",
#     base = "@alpine",
#     entrypoint = ["/cmd"],
#     tars = [":app_layer"],
# )

# # This is the target that should be released to the target platform
# platform_transition_filegroup(
#     name = "transitioned_image",
#     srcs = [":image"],
#     target_platform = select({
#         "@platforms//cpu:arm64": "@rules_go//go/toolchain:linux_arm64",
#         "@platforms//cpu:x86_64": "@rules_go//go/toolchain:linux_amd64",
#     }),
# )

# # $ bazel build :tarball
# # $ docker load --input $(bazel cquery --output=files :tarball)
# # $ docker run --rm gcr.io/example:latest
# #   string(
# # -       "Hello World",
# # +       "Hello Go",
# #   )
# oci_tarball(
#     name = "tarball",
#     # Use the image built for the exec platform rather than the target platform
#     image = ":image",
#     repo_tags = ["trackingdetector:latest"],
# )

# container_structure_test(
#     name = "test",
#     configs = ["test.yaml"],
#     # Use the image built for the exec platform rather than the target platform
#     image = ":image",
# )
